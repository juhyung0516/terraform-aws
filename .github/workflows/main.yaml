name: "Terraform action"
on:
  push:
    branches:
      - main
  pull_request:
permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      # 1. GitHub 리포지토리에서 최신 코드를 체크아웃
      - name: Git checkout
        uses: actions/checkout@v3

      # 2. AWS 인증 정보 설정 (GitHub에서 AWS에 인증하기 위해 OIDC 사용)
      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM

      # 3. Terraform 버전 설정 및 설치, terraform_wrapper 설정을 비활성화
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5
          terraform_wrapper: false

      # 4. Terraform 코드의 형식을 검사
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      # 5. S3 키에 사용할 날짜와 시간을 환경 변수로 설정
      - name: Set Date and Time Variables for S3 Key
        run: |
          echo "AWS_BUCKET_KEY_NAME=test-$(date +'%Y%m%d%H%M')/terraform.tfstate" >> $GITHUB_ENV

      # 6. S3 백엔드를 사용하여 Terraform 초기화
      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

      # 7. Terraform 코드의 유효성 검사
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      # 8. Terraform Plan (파일에 출력)
      - name: Terraform Plan (output to file)
        run: terraform plan -out=plan.tfplan

      # 9. Terraform Plan을 JSON 형식으로 변환
      - name: Convert Terraform plan to JSON
        run: terraform show -json plan.tfplan > plan.json

      # 10. 삭제할 리소스 추출
      - name: Extract Resource Names
        id: extract
        run: |
          cat plan.json | jq -r '.resource_changes[] | select(.change.actions | index("delete")) | .address' > resources_to_delete.txt

      # 11. 추출한 리소스를 대상으로 삭제 실행
      - name: Destroy Specified Resources
        run: |
          while IFS= read -r resource; do
            terraform destroy -target="$resource" -auto-approve
          done < resources_to_delete.txt

      # 12. Infracost 설정 (비용 분석 도구 설치)
      # - name: Setup Infracost
      #   uses: infracost/actions/setup@v1
      #   with:
      #     api-key: ${{ secrets.INFRACOST_API_KEY }}

      # 13. Infracost를 사용하여 JSON 형식의 비용 분석 결과 생성
      # - name: Infracost breakdown
      #   id: infracost
      #   run: infracost breakdown --path=plan.json --format=json --out-file=infracost_output.json

      # 14. Infracost 결과를 S3에 업로드
      # - name: Upload Infracost output to S3
      #   run: |
      #     aws s3 cp infracost_output.json s3://${{ secrets.AWS_BUCKET_NAME }}/test-$(date +'%Y%m%d%H%M')-infracost.json

      # 15. Terraform Apply (AWS 리소스를 실제로 생성)
      # - name: Terraform Apply
      #   if: github.ref == 'refs/heads/main'
      #   run: terraform apply -auto-approve plan.tfplan
