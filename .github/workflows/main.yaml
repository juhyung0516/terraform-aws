name: "Terraform action with Prowler Report Upload"
on:
  push:
    branches:
      - main
  pull_request:
permissions:
  id-token: write
  contents: read
  pull-requests: write
env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}
jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      # 날짜와 시간을 포함한 S3 키 변수 설정
      - name: Set Date and Time Variables for S3 Key
        run: |
          echo "AWS_BUCKET_KEY_NAME=test-$(date +'%Y%m%d%H%M')/terraform.tfstate" >> $GITHUB_ENV
          echo "PROWLER_REPORT_KEY=prowler-report-$(date +'%Y%m%d%H%M').json" >> $GITHUB_ENV
        # 현재 날짜와 시간을 포함하여 Terraform 상태 파일과 Prowler 보고서의 S3 키 설정

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        if: github.event_name == 'pull_request'
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      # Prowler 실행 및 JSON 보고서 생성
      - name: Run Prowler for ISMS-P Compliance Check
        run: |
          curl -LO https://github.com/prowler-cloud/prowler/releases/latest/download/prowler-2.12.0-linux.zip
          unzip prowler-2.12.0-linux.zip
          chmod +x prowler
          ./prowler -g isms -M json > ${{ env.PROWLER_REPORT_KEY }}
        # Prowler가 ISMS-P 기준으로 검사 후 결과를 JSON 파일로 저장

      # Prowler 보고서를 S3에 업로드
      - name: Upload Prowler Report to S3
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
        run: |
          aws s3 cp ${{ env.PROWLER_REPORT_KEY }} s3://${AWS_BUCKET_NAME}/${env.PROWLER_REPORT_KEY}
        # Prowler JSON 보고서를 S3에 업로드하여 보관
