name: "Terraform action"
on:
  push:
    branches:
      - main
  pull_request:
permissions:
  id-token: write # GitHub Actions에서 OIDC로 AWS에 인증할 때 필요한 권한
  contents: read # 리포지토리 콘텐츠를 읽기 위한 권한
  pull-requests: write # PR에서 GitHub 봇이 댓글을 달기 위한 권한
env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }} # AWS 리전 설정
jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v3 # 리포지토리의 최신 코드를 가져옴

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }} # GitHub Secrets에 저장된 IAM 역할 ARN
          aws-region: ${{ secrets.AWS_REGION }} # GitHub Secrets에 저장된 AWS 리전
          role-session-name: GitHub-OIDC-TERRAFORM # 세션 이름 설정

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5 # 사용하려는 Terraform 버전 설정

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check # Terraform 코드의 형식을 검사
        continue-on-error: true # 형식 검사 실패 시에도 다음 단계로 계속 진행

      # 날짜와 시간을 포함한 S3 키 변수 설정
      - name: Set Date and Time Variables for S3 Key
        run: |
          echo "AWS_BUCKET_KEY_NAME=test-$(date +'%Y%m%d%H%M')/terraform.tfstate" >> $GITHUB_ENV
        # 현재 날짜와 시간을 포함하여 S3 키 설정 (예: test-202411052146/terraform.tfstate)

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }} # GitHub Secrets에서 S3 버킷 이름 가져옴
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"
        # S3 백엔드 설정을 포함하여 Terraform 초기화

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color # Terraform 구성의 유효성 검사

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color # Terraform 실행 계획 생성
        if: github.event_name == 'pull_request'
        continue-on-error: true # PR일 때 계획 생성이 실패해도 계속 진행

      # PR에 Terraform 검사 결과와 계획을 댓글로 추가
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}" # Terraform 계획 결과를 환경 변수로 설정
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
        # PR에 Terraform 결과와 계획을 댓글로 남김

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1 # 계획 생성이 실패한 경우 작업을 중단

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        # main 브랜치에 대한 푸시일 때만 Terraform apply 실행
